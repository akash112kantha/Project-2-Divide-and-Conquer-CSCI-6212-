CODE

#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>

using namespace std;

class Point {
public:
    int x, y;

    Point() : x(0), y(0) {}  

    Point(int x, int y) : x(x), y(y) {}
};

class DynamicArray {
public:
    DynamicArray(int capacity = 10) {
        array_ = vector<Point>(capacity);
        size_ = 0;
    }

    void append(Point point) {
        if (size_ >= array_.size()) {
            array_.resize(array_.size() * 2);
        }
        array_[size_] = point;
        size_++;
    }

    Point get(int index) {
        if (index < 0 || index >= size_) {
            throw std::out_of_range("Index out of bounds");
        }
        return array_[index];
    }

    int getSize() {
        return size_;
    }

private:
    vector<Point> array_;
    int size_;
};

void mergeArrays(DynamicArray& left, DynamicArray& right, DynamicArray& merged) {
    int leftIndex = 0;
    int rightIndex = 0;

    while (leftIndex < left.getSize() && rightIndex < right.getSize()) {
        if (left.get(leftIndex).x < right.get(rightIndex).x) {
            merged.append(left.get(leftIndex));
            leftIndex++;
        } else {
            merged.append(right.get(rightIndex));
            rightIndex++;
        }
    }

    while (leftIndex < left.getSize()) {
        merged.append(left.get(leftIndex));
        leftIndex++;
    }

    while (rightIndex < right.getSize()) {
        merged.append(right.get(rightIndex));
        rightIndex++;
    }
}

void mergeSort(DynamicArray& array) {
    if (array.getSize() <= 1) {
        return;
    }

    int mid = array.getSize() / 2;
    DynamicArray left(mid);
    DynamicArray right(array.getSize() - mid);

    for (int i = 0; i < mid; i++) {
        left.append(array.get(i));
    }

    for (int i = mid; i < array.getSize(); i++) {
        right.append(array.get(i));
    }

    mergeSort(left);
    mergeSort(right);

    mergeArrays(left, right, array);
}

Point topRightStaircase(DynamicArray& points) {
    mergeSort(points);

    // Returning the top-right point.
    return points.get(points.getSize() - 1);
}

DynamicArray readPoints() {
    DynamicArray points;

    int numPoints;
    cout << "Enter the number of points: ";
    cin >> numPoints;

    for (int i = 0; i < numPoints; i++) {
        int x, y;
        cout << "Enter point " << i + 1 << ": ";
        cin >> x >> y;

        points.append(Point(x, y));
    }

    return points;
}

void printPoint(Point point) {
    cout << "(" << point.x << ", " << point.y << ")";
}

int main() {
    DynamicArray points = readPoints();

    // Calling the topRightStaircase() function.
    Point topRightPoint = topRightStaircase(points);

    // Printing the top-right point.
    cout << "Top-right point is: ";
    printPoint(topRightPoint);
    cout << endl;

    // Printing the elapsed time for different values of n
    for (int i = 10; i <= 100000000; i *= 10) {
        for (int j = 0; j < i; j++) {
            points.append(Point(j, j));
        }

        // Starting the timer.
        auto start = std::chrono::high_resolution_clock::now();

        // Calling the topRightStaircase() function.
        topRightPoint = topRightStaircase(points);

        // Stopping the timer.
        auto end = std::chrono::high_resolution_clock::now();

        // Calculating the time elapsed.
        auto elapsedTime = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();

        // Printing the time elapsed to the console.
        std::cout << "Time elapsed for n = " << i << ": " << elapsedTime << " nanoseconds" << std::endl;
    }

    return 0;
}
